<?php

/**
 * @file
 * For implementing different hooks for bakery SSO functionlity.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\TrustedRedirectResponse;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\Core\Entity\EntityInterface;
use Drupal\user\Entity\User;

/**
 * Implements hook_user_login().
 */
function bakery_user_login($account) {
  $init = \Drupal::service('bakery.bakery_service')->initField($account->id());
  $cookie = \Drupal::service('bakery.bakery_service')->validateCookie('FORTUNE');
  \Drupal::service('bakery.bakery_service')->bakeChocolatechipCookie($account->getUsername(), $account->getEmail(), $account->getPassword(), $init);
  if (!empty($cookie['return-url'])) {
    \Drupal::service('bakery.bakery_service')->eatCookie('FORTUNE');
    header('location: ' . $cookie['return-url'][0]);
    exit();
  }
}

/**
 * Implements hook_user_logout().
 */
function bakery_user_logout($account) {
  $user = \Drupal::currentUser();
  $cookie = \Drupal::service('bakery.bakery_service')->validateCookie();

  // Only delete the SSO cookie if the name is the same in case there was an
  // existing session that's being logged out and SSO cookie is for new session.
  if ($user->id() && $cookie && $cookie['name'] === $user->getUsername()) {
    \Drupal::service('bakery.bakery_service')->eatCookie();
  }
  // Destroy session cookie.
  \Drupal::service('bakery.bakery_service')->eatCookie(session_name());
  \Drupal::service('bakery.bakery_service')->eatCookie();
}

/**
 * Implements hook_ENTITY_TYPE_insert()
 */
function bakery_user_insert($entity) {
  $user = User::load($entity->id());
  $user->addRole('vistausers');
  $user->save();
}

/**
 * Implements hook_user_presave().
 */
function bakery_user_presave(Drupal\Core\Entity\EntityInterface $entity) {
  if (\Drupal::config('bakery.settings')->get('bakery_is_main')) {
    // We store email/name if they changed. We want to wait with doing
    // anything else until the changes are saved locally.
    foreach (\Drupal::config('bakery.settings')->get('bakery_supported_fields') as $type => $enabled) {
      // if ($enabled && isset($edit[$type]) && isset($account->$type) && $account->$type != $edit[$type]) {
      //   $_SESSION['bakery'][$type] = $edit[$type];
      // }
    }
  }
}

/**
 * Implements hook_user_update().
 */
function bakery_user_update(Drupal\Core\Entity\EntityInterface $entity) {
  // We need to push changes.
  if (0 && \Drupal::config('bakery.settings')->get('bakery_is_main') && isset($_SESSION['bakery'])) {
    $type = 'stroopwafel';
    $key = \Drupal::config('bakery.settings')->get('bakery_key');
    $payload['data'] = serialize($_SESSION['bakery']);
    $payload['timestamp'] = $_SERVER['REQUEST_TIME'];
    $payload['uid'] = $account->id();
    $payload['category'] = $category;
    $payload['type'] = $type;
    $data = \Drupal::service('bakery.bakery_service')->bakeData($payload);
    // Respond with encrypted and signed account information.
    $payload = drupal_http_build_query(array($type => $data));
    unset($_SESSION['bakery']);
    // Now update the slaves.
    $minions = \Drupal::config('bakery.settings')
      ->get('bakery_minions') || array();
    foreach ($minions as $minion) {
      $options = array(
      'headers' => array(
      'Content-Type' => 'application/x-www-form-urlencoded; charset=utf-8',
      ),
      'method' => 'POST',
      'data' => $payload,
      );
      $result = drupal_http_request($minion . 'bakery/update', $options);
      if ($result->code != 200) {
        drupal_set_message(t('Error %error for site at %url', array(
        '%error' => $result->code . ' ' . $result->error,
        '%url' => $slave,
        )));
      }
      else {
      drupal_set_message($result->data);
      // TODO: Roll back the change.
      }
    }
    $user = \Drupal::currentUser();
    if ($user->id() === $account->id()) {
      // Rebake SSO cookie so user stays authenticated.
      $init = \Drupal::service('bakery.bakery_service')->initField($account->id());
      \Drupal::service('bakery.bakery_service')->bakeChocolatechipCookie($account->getUsername(), $account->getEmail(), $init);
    }
  }
}

/**
 * Implements hook_user_view().
 */
function bakery_user_view(array &$build, $account, $view_mode, $langcode) {
  if (!\Drupal::config('bakery.settings')->get('bakery_is_main')) {
    $main = \Drupal::config('bakery.settings')->get('bakery_main');
    $init_url = _bakery_init_field_url($account->init);
    if (parse_url($main, PHP_URL_HOST) == parse_url($init_url, PHP_URL_HOST)) {
      $account->content['summary']['main_profile'] = array(
        '#type' => 'user_profile_item',
        '#title' => t('Primary profile'),
        // Take everything up to '/edit'.
        '#markup' => '<a href="'. substr($init_url, 0, strlen($init_url) - 5) .'">Profile on primary site</a>',
      );
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function bakery_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'user_profile_form':
    case 'user_form':
      if (!\Drupal::config('bakery.settings')->get('bakery_is_main') && !\Drupal::currentUser()->hasPermission('administer users')) {
        $main_uri = \Drupal::config('bakery.settings')->get('bakery_main');
        // $init_url = _bakery_init_field_url($form['#user']->init);.
        if (isset($form['account'])) {
          drupal_set_message(t('You can change the name, mail, and password <a href=":url">at the main site</a>.', array(':url' => $main_uri)), 'status', FALSE);
          $form['account']['#access'] = FALSE;
          $form['account']['name']['#access'] = FALSE;
          $form['account']['pass']['#access'] = FALSE;
          $form['account']['mail']['#access'] = FALSE;
        }
        foreach (\Drupal::config('bakery.settings')->get('bakery_supported_fields') as $type => $value) {
          if ($value) {
            switch ($type) {
              case 'mail':
              case 'name':
                break;

              case 'picture':
                if (isset($form['picture'])) {
                  $form['picture']['picture_delete']['#access'] = FALSE;
                  $form['picture']['picture_upload']['#access'] = FALSE;
                  $form['picture']['#description'] = t('You can change the image <a href=":url">at the main site</a>.', array(':url' => $main_uri));
                }
                break;

              case 'language':
                if (isset($form['locale'][$type])) {
                  $form['locale'][$type]['#disabled'] = TRUE;
                  $form['locale'][$type]['#description'] .= ' ' . t('You can change the language setting <a href=":url">at the main site</a>.', array(':url' => $main_uri));
                }
                break;

              case 'signature':
                if (isset($form['signature_settings'][$type])) {
                  $form['signature_settings'][$type]['#disabled'] = TRUE;
                  $form['signature_settings'][$type]['#description'] .= ' ' . t('You can change the signature <a href=":url">at the main site</a>.', array(':url' => $main_uri));
                }
                break;

              default:
                if (isset($form[$type])) {
                  $form[$type]['#disabled'] = TRUE;
                }
                if (isset($form[$type][$type])) {
                  $form[$type][$type]['#disabled'] = TRUE;
                  $form[$type][$type]['#description'] .= ' ' . t('You can change this setting <a href=":url">at the main site</a>.', array(':url' => $main_uri));
                }
                break;
            }
          }
        }
      }
      break;

    case 'user_register_form':
      // Only do new user registration on the main site.
      if (!\Drupal::config('bakery.settings')->get('bakery_is_main')) {

        $data = [];
        $data['returnURL'] = '//' . $_SERVER['HTTP_HOST'] . '/';
        \Drupal::service('bakery.bakery_service')->bakeSnickerdoodleCookie($data);
        \Drupal::service('bakery.bakery_service')->eatCookie();
        header("location: ". \Drupal::config('bakery.settings')->get('bakery_main'). "user/register");
        exit();
      }
      break;

    case 'user_pass':
      // Slave sites need to make sure the local account exists, if the main
      // account exists.
      if (!\Drupal::config('bakery.settings')->get('bakery_is_main')) {
        array_unshift($form['#validate'], '_bakery_pass_validate');
      }
      break;

    case 'user_pass_reset':
      // As part of the minion site registration we need to handle email
      // validation and password reset.
      if (!\Drupal::config('bakery.settings')->get('bakery_is_main')) {
        // Set a submit handler for the psuedo-reset form.
        $form['#submit'] = array('_bakery_reset_submit');
        // Unset its custom action.
        //unset($form['#action']);
      }
      break;

    case 'user_login_block':
    case 'user_login_form':
      // Provide login ability on the minion sites.
      if (!\Drupal::config('bakery.settings')->get('bakery_is_main')) {

        // Replace two validators from user module because they log the user in
        // and test if account exists. We want to check if the account exists on
        // the main instead.
        // dpm($form['#validate']);.
        $form['#validate'] = array_diff($form['#validate'], array('::validateAuthentication', '::validateFinal'));
        // Also replace the submit handler with our own to
        // set a redirect cookie.
        $form['#submit'] = array('_bakery_login_submit');
      }
      break;

    default:
      break;
  }
}

/**
 * Validate handler for the password reset login.
 */
function _bakery_pass_validate($form, &$form_state) {
  $values = $form_state->getValues();
  // On a minion site it's possible that a user requests their password but
  // doesn't have an account on the minion site. So, we check if that's the case
  // and use our helpful functions to create their account on the minion site.
  $name = trim($values['name']);

  $account = user_load_by_mail($name);
  if (empty($account)) {
    // No success, try to load by name.
    $account = user_load_by_name($name);
  }
  if (!$account) {
    // Attempt to copy account from main.
    \Drupal::service('bakery.bakery_service')->requestAccount($name, TRUE);
  }
}

/**
 * Submit handler for the password reset form.
 */
function _bakery_reset_submit($form, &$form_state) {
  dsm('here');

  global $base_url;

  // If we're here it means the user has validated their email correctly.
  $main = \Drupal::config('bakery.settings')->get('bakery_main');
  //$key = \Drupal::config('bakery.settings')->get('bakery_key');
  // It's safe to use arg(2) here to load the user and log in because the
  // callback has validated the request and Drupal's Form API protects us
  // against forgery.
  $path_args = explode('/', current_path());
  $account = \Drupal::entityManager()->getStorage('user')->load($path_args[2]);
  print "<pre>";
  print_r($account);
  exit();

  // If they have not logged in before we need to update the main site.
  if ($account->login === 0) {
    $type = 'thinmint';
    $payload = array();
    $payload['name'] = $account->getUsername();
    // Match how slaves are set on the main.
    $payload['slave'] = rtrim($base_url, '/') . '/';
    $payload['uid'] = $account->id();
    $payload['timestamp'] = $_SERVER['REQUEST_TIME'];
    $payload['type'] = $type;
    $data = \Drupal::service('bakery.bakery_service')->bakeData($payload);
    // $payload = UrlHelper::buildQuery(array($type => $data));
    // Make request to main for account information.
    $client = \Drupal::httpClient();
    try {
      // Push validation to main.
      $response = $client->post($main . 'bakery/validate', ["form_params" => [$type => $data]]);
    }
    catch (BadResponseException $exception) {
      $response = $exception->getResponse();
      Drupal::logger('bakery')->error(t('Failed to fetch file due to HTTP error "%error"', array('%error' => $response->getStatusCode() . ' ' . $response->getReasonPhrase())), 'error');
      return FALSE;
    }
    catch (RequestException $exception) {
      Drupal::logger('bakery')->error(t('Failed to fetch file due to error "%error"', array('%error' => $exception->getMessage())), 'error');
      return FALSE;
    }
  }

  // If they have logged in before or the main updated correctly, log them in.
  if ($account->login > 0 || $response->getStatusCode() == 200) {
    // Log the user in.
    $init = \Drupal::service('bakery.bakery_service')->initField($account->id());
    \Drupal::service('bakery.bakery_service')->bakeChocolatechipCookie($account->getUsername(), $account->getEmail(), $init);
    user_login_finalize($account);
    // \Drupal::service('bakery.bakery_service')->authenticateFinalize($edit);
    // Inform them that they need to reset their password.
    drupal_set_message(t('You have just used your one-time login link. It is no longer necessary to use this link to login. Please change your password at <a href="!url">@main</a>.', array('!url' => check_url(_bakery_init_field_url($init)), '@main' => \Drupal::config('bakery.settings')->get('bakery_main'))));
    return new RedirectResponse('user.page');
  }
  else {
    return new RedirectResponse('user.login');
  }
}

/**
 * Handle registration by redirecting to main.
 */
function _bakery_register_submit($form, &$form_state) {
  // Create an array of fields to send to the main.
  // Save values to cookie.
  $data = array(
    "name" => $form_state->getValue('name'),
    "pass" => $form_state->getValue('pass'),
    "mail" => $form_state->getValue('mail'),
  );
  _bakery_save_destination_param($form, $data);
  unset($_GET['destination']);

  // Store name and email in case of error and return from main.
  $_SESSION['bakery']['register'] = array(
    'name' => $data['name'],
    'mail' => $data['mail'],
  );
  // Create cookie and redirect to main.
  \Drupal::service('bakery.bakery_service')->bakeOatmealCookie($form_state->getValue('name'), $data);
  // Remove unneeded values.
  $form_state->cleanValues();
  $main_uri = \Drupal::config('bakery.settings')->get('bakery_main') . 'bakery';
  $form_state->setFormState(['redirect' => new TrustedRedirectResponse($main_uri)]);
}

/**
 * Handle login by redirecting to main.
 */
function _bakery_login_submit($form, &$form_state) {
  // Get rid of all the values we don't explicitly know we want. While this may
  // break some modules it ensures we don't send sensitive data between sites.
  // login data to main site.
  $data = array(
    "name" => $form_state->getValue('name'),
    "pass" => $form_state->getValue('pass'),
  );

  _bakery_save_destination_param($form, $data);
  unset($_GET['destination']);

  // Create cookie and redirect to main.
  \Drupal::service('bakery.bakery_service')
    ->bakeOatmealCookie($form_state->getValue('name'), $data);
  // Remove unneeded values.
  $form_state->cleanValues();
  $main_uri = \Drupal::config('bakery.settings')->get('bakery_main') . 'bakery/login';
  $form_state->setFormState(['redirect' => new TrustedRedirectResponse($main_uri)]);
}

/**
 * Check if a form destination is set and save it in $data array.
 *
 * Used to preserve destination in Bakery redirection to main and slave
 * during login and registration.
 *
 * @param array $form
 *   Form definition to check.
 * @param array $data
 *   Array to store the detected destination value, if any.
 */
function _bakery_save_destination_param($form, &$data) {
  // Hold on to destination if set.
  if (strpos($form['#action'], 'destination=') !== FALSE) {
    // If an absolute URL is in destination parse_url() will issue a warning
    // and not populate $url_args so no further protection is needed.
    parse_str(parse_url($form['#action'], PHP_URL_QUERY), $url_args);
    if (!empty($url_args['destination'])) {
      $data['destination'] = $url_args['destination'];
    }
  }
}

/**
 * Access callback for path /user.
 *
 * Displays user profile if user is logged in, or login form for anonymous
 * users.
 */
function bakery_user_page() {
  $user = \Drupal::currentUser();
  if ($user->id()) {
    menu_set_active_item('user/' . $user->id());
    return menu_execute_active_handler();
  }
}

/**
 * Validate the account information request.
 */
function bakery_taste_gingerbread_cookie() {
  $type = 'gingerbread';
  if (empty($_POST[$type])) {
    return FALSE;
  }
  if (($cookie = \Drupal::service('bakery.bakery_service')->validateData($_POST[$type], $type)) === FALSE) {
    return FALSE;
  }
  $_SESSION['bakery']['name'] = $cookie['name'];
  $_SESSION['bakery']['or_email'] = $cookie['or_email'];
  $_SESSION['bakery']['slave'] = $cookie['slave'];
  $_SESSION['bakery']['uid'] = $cookie['uid'];
  return TRUE;
}

/**
 * Build full init url to main.
 */
function _bakery_init_field_url($init) {
  $scheme = parse_url(\Drupal::config('bakery.settings')->get('bakery_main'), PHP_URL_SCHEME);
  $url = $init->getValue();
  if (is_array($url) && !empty($url)) {
    return $url[0]['value'];
  }
  else {
    return $scheme;
  }
}
